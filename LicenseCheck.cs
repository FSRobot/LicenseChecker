using LicenseChecker.Helpers;
using Microsoft.Extensions.Logging;
using Microsoft.Win32;
using Newtonsoft.Json;
using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;

namespace LicenseChecker
{
    public class LicenseCheck
    {
        public readonly RsaHelper Rsa = new RsaHelper();
        private readonly DeviceInfo deviceInfo;
        private readonly ILogger<LicenseCheck> logger;

        public LicenseCheck()
        {
            deviceInfo = new DeviceInfo();
        }
        public LicenseCheck(ILogger<LicenseCheck> logger)
        {
            deviceInfo = new DeviceInfo();
            this.logger = logger;
        }

        readonly byte[] _pkBytes =
        {
            0x3C, 0x52, 0x53, 0x41, 0x4B, 0x65, 0x79, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x3E, 0x3C, 0x4D, 0x6F, 0x64, 0x75,
            0x6C, 0x75, 0x73, 0x3E, 0x79, 0x62, 0x51, 0x47, 0x57, 0x4F, 0x38, 0x31, 0x52, 0x47, 0x4B, 0x6B, 0x69, 0x4C,
            0x30, 0x55, 0x54, 0x75, 0x51, 0x37, 0x5A, 0x31, 0x32, 0x2F, 0x46, 0x79, 0x73, 0x6D, 0x6C, 0x43, 0x48, 0x6E,
            0x79, 0x5A, 0x67, 0x6C, 0x48, 0x62, 0x5A, 0x78, 0x56, 0x63, 0x35, 0x57, 0x5A, 0x73, 0x62, 0x2B, 0x4C, 0x33,
            0x43, 0x53, 0x68, 0x35, 0x34, 0x71, 0x4C, 0x64, 0x56, 0x68, 0x6D, 0x4C, 0x53, 0x2B, 0x2B, 0x52, 0x76, 0x51,
            0x6A, 0x6D, 0x65, 0x2F, 0x51, 0x2B, 0x36, 0x39, 0x62, 0x67, 0x4B, 0x7A, 0x2F, 0x66, 0x53, 0x75, 0x47, 0x2F,
            0x52, 0x36, 0x64, 0x34, 0x64, 0x44, 0x43, 0x79, 0x61, 0x59, 0x78, 0x4E, 0x63, 0x36, 0x4A, 0x42, 0x4D, 0x65,
            0x43, 0x6B, 0x4D, 0x58, 0x76, 0x62, 0x44, 0x30, 0x43, 0x2F, 0x46, 0x38, 0x76, 0x67, 0x6D, 0x65, 0x69, 0x42,
            0x79, 0x42, 0x67, 0x75, 0x4A, 0x37, 0x78, 0x46, 0x68, 0x63, 0x41, 0x6A, 0x6C, 0x32, 0x6C, 0x56, 0x71, 0x6D,
            0x5A, 0x41, 0x47, 0x5A, 0x2B, 0x6D, 0x32, 0x6E, 0x44, 0x41, 0x34, 0x7A, 0x74, 0x6C, 0x37, 0x4F, 0x56, 0x72,
            0x54, 0x37, 0x52, 0x2F, 0x4F, 0x70, 0x4D, 0x55, 0x38, 0x36, 0x75, 0x45, 0x57, 0x6A, 0x32, 0x58, 0x57, 0x41,
            0x73, 0x4E, 0x31, 0x42, 0x5A, 0x78, 0x65, 0x79, 0x7A, 0x74, 0x66, 0x5A, 0x48, 0x52, 0x55, 0x72, 0x4E, 0x46,
            0x69, 0x51, 0x31, 0x37, 0x70, 0x2F, 0x30, 0x73, 0x34, 0x6E, 0x78, 0x6A, 0x7A, 0x6E, 0x6C, 0x53, 0x30, 0x6B,
            0x52, 0x74, 0x6F, 0x4B, 0x6F, 0x79, 0x4E, 0x57, 0x64, 0x42, 0x51, 0x41, 0x47, 0x4C, 0x75, 0x35, 0x6A, 0x6E,
            0x4C, 0x61, 0x66, 0x79, 0x41, 0x2F, 0x36, 0x66, 0x2F, 0x2F, 0x6E, 0x4D, 0x58, 0x75, 0x5A, 0x75, 0x76, 0x47,
            0x73, 0x66, 0x69, 0x49, 0x4E, 0x67, 0x4F, 0x4D, 0x79, 0x59, 0x59, 0x74, 0x62, 0x77, 0x45, 0x54, 0x59, 0x74,
            0x77, 0x4B, 0x31, 0x61, 0x53, 0x30, 0x65, 0x6D, 0x39, 0x37, 0x2F, 0x6C, 0x35, 0x2F, 0x34, 0x37, 0x4F, 0x62,
            0x35, 0x51, 0x34, 0x6A, 0x7A, 0x4C, 0x41, 0x35, 0x49, 0x30, 0x57, 0x74, 0x2F, 0x2F, 0x36, 0x62, 0x79, 0x54,
            0x4C, 0x4D, 0x55, 0x5A, 0x61, 0x52, 0x31, 0x61, 0x46, 0x37, 0x69, 0x6B, 0x77, 0x63, 0x70, 0x54, 0x6A, 0x43,
            0x4A, 0x39, 0x71, 0x62, 0x48, 0x2F, 0x57, 0x41, 0x34, 0x57, 0x41, 0x50, 0x4E, 0x78, 0x70, 0x33, 0x30, 0x42,
            0x45, 0x51, 0x52, 0x4D, 0x7A, 0x5A, 0x54, 0x55, 0x72, 0x67, 0x56, 0x4F, 0x35, 0x56, 0x69, 0x71, 0x2B, 0x32,
            0x58, 0x6C, 0x41, 0x37, 0x4B, 0x69, 0x61, 0x2B, 0x6A, 0x4F, 0x54, 0x42, 0x6C, 0x74, 0x78, 0x55, 0x32, 0x46,
            0x74, 0x69, 0x4B, 0x6F, 0x31, 0x68, 0x50, 0x36, 0x75, 0x46, 0x48, 0x69, 0x42, 0x65, 0x7A, 0x73, 0x6F, 0x65,
            0x75, 0x70, 0x70, 0x34, 0x79, 0x45, 0x59, 0x41, 0x6E, 0x30, 0x33, 0x45, 0x49, 0x54, 0x76, 0x78, 0x46, 0x58,
            0x36, 0x67, 0x63, 0x58, 0x6D, 0x46, 0x47, 0x4D, 0x72, 0x38, 0x56, 0x62, 0x56, 0x6D, 0x4B, 0x34, 0x36, 0x58,
            0x69, 0x53, 0x54, 0x4C, 0x68, 0x48, 0x64, 0x56, 0x70, 0x30, 0x34, 0x74, 0x6C, 0x68, 0x43, 0x79, 0x74, 0x44,
            0x4D, 0x4D, 0x51, 0x71, 0x77, 0x36, 0x78, 0x7A, 0x37, 0x54, 0x76, 0x74, 0x46, 0x77, 0x66, 0x50, 0x4A, 0x62,
            0x52, 0x2F, 0x2B, 0x70, 0x35, 0x34, 0x71, 0x67, 0x79, 0x55, 0x48, 0x31, 0x61, 0x4B, 0x51, 0x62, 0x44, 0x7A,
            0x73, 0x72, 0x72, 0x4B, 0x37, 0x73, 0x2B, 0x38, 0x56, 0x39, 0x56, 0x5A, 0x36, 0x38, 0x78, 0x4A, 0x54, 0x47,
            0x34, 0x34, 0x72, 0x51, 0x61, 0x47, 0x33, 0x31, 0x51, 0x75, 0x78, 0x39, 0x41, 0x75, 0x6F, 0x39, 0x31, 0x55,
            0x43, 0x6A, 0x45, 0x6E, 0x4E, 0x53, 0x31, 0x4B, 0x2B, 0x7A, 0x52, 0x4C, 0x34, 0x69, 0x6F, 0x43, 0x5A, 0x70,
            0x6E, 0x68, 0x61, 0x69, 0x6C, 0x56, 0x74, 0x37, 0x32, 0x35, 0x6B, 0x33, 0x35, 0x42, 0x76, 0x59, 0x4B, 0x71,
            0x43, 0x43, 0x74, 0x50, 0x39, 0x32, 0x61, 0x58, 0x64, 0x38, 0x4C, 0x30, 0x4E, 0x5A, 0x45, 0x48, 0x48, 0x57,
            0x51, 0x79, 0x6B, 0x46, 0x2B, 0x38, 0x2F, 0x66, 0x6B, 0x58, 0x58, 0x35, 0x69, 0x43, 0x34, 0x51, 0x5A, 0x50,
            0x51, 0x6D, 0x76, 0x75, 0x61, 0x67, 0x54, 0x5A, 0x48, 0x61, 0x30, 0x6B, 0x4B, 0x36, 0x37, 0x75, 0x4F, 0x69,
            0x49, 0x72, 0x35, 0x42, 0x69, 0x77, 0x74, 0x6F, 0x2B, 0x69, 0x79, 0x6A, 0x51, 0x4E, 0x7A, 0x48, 0x79, 0x43,
            0x6D, 0x39, 0x72, 0x46, 0x6C, 0x59, 0x71, 0x2B, 0x51, 0x48, 0x76, 0x70, 0x59, 0x2F, 0x4F, 0x79, 0x34, 0x6A,
            0x73, 0x63, 0x53, 0x54, 0x6D, 0x6A, 0x37, 0x4C, 0x57, 0x78, 0x32, 0x6E, 0x68, 0x49, 0x76, 0x6E, 0x5A, 0x59,
            0x2F, 0x5A, 0x2F, 0x34, 0x62, 0x42, 0x72, 0x53, 0x70, 0x54, 0x6A, 0x37, 0x70, 0x79, 0x55, 0x78, 0x6C, 0x66,
            0x30, 0x41, 0x78, 0x6F, 0x5A, 0x79, 0x61, 0x59, 0x46, 0x6B, 0x4B, 0x4D, 0x4E, 0x47, 0x57, 0x31, 0x55, 0x4A,
            0x42, 0x4A, 0x65, 0x58, 0x32, 0x4E, 0x4B, 0x49, 0x73, 0x41, 0x6A, 0x31, 0x6F, 0x2F, 0x54, 0x45, 0x50, 0x54,
            0x73, 0x32, 0x56, 0x4A, 0x7A, 0x4B, 0x49, 0x47, 0x51, 0x4E, 0x6F, 0x43, 0x4A, 0x4A, 0x43, 0x38, 0x56, 0x70,
            0x76, 0x6D, 0x43, 0x4A, 0x67, 0x31, 0x39, 0x44, 0x75, 0x55, 0x61, 0x4C, 0x70, 0x67, 0x78, 0x39, 0x4F, 0x42,
            0x33, 0x2F, 0x44, 0x30, 0x53, 0x66, 0x55, 0x39, 0x35, 0x53, 0x38, 0x68, 0x62, 0x79, 0x59, 0x2B, 0x6A, 0x64,
            0x6C, 0x54, 0x41, 0x33, 0x49, 0x38, 0x68, 0x61, 0x2B, 0x2F, 0x45, 0x73, 0x6C, 0x74, 0x63, 0x65, 0x47, 0x39,
            0x73, 0x4D, 0x38, 0x34, 0x6F, 0x35, 0x56, 0x71, 0x38, 0x41, 0x31, 0x75, 0x6D, 0x39, 0x54, 0x6B, 0x77, 0x59,
            0x6E, 0x31, 0x39, 0x53, 0x6C, 0x73, 0x45, 0x4F, 0x69, 0x4B, 0x45, 0x50, 0x2B, 0x72, 0x68, 0x45, 0x48, 0x76,
            0x72, 0x46, 0x58, 0x4D, 0x66, 0x31, 0x74, 0x52, 0x59, 0x42, 0x64, 0x38, 0x6B, 0x76, 0x6F, 0x7A, 0x73, 0x79,
            0x45, 0x75, 0x68, 0x56, 0x42, 0x4B, 0x51, 0x71, 0x6C, 0x48, 0x49, 0x52, 0x36, 0x38, 0x46, 0x51, 0x49, 0x45,
            0x79, 0x44, 0x72, 0x62, 0x31, 0x36, 0x37, 0x49, 0x54, 0x7A, 0x56, 0x37, 0x6F, 0x4D, 0x75, 0x43, 0x6D, 0x72,
            0x57, 0x4B, 0x36, 0x41, 0x4F, 0x38, 0x69, 0x4E, 0x76, 0x56, 0x59, 0x46, 0x35, 0x4F, 0x6B, 0x31, 0x59, 0x77,
            0x64, 0x6E, 0x2F, 0x6D, 0x57, 0x79, 0x66, 0x66, 0x65, 0x69, 0x6E, 0x31, 0x71, 0x44, 0x48, 0x6B, 0x48, 0x75,
            0x76, 0x79, 0x72, 0x4B, 0x50, 0x69, 0x30, 0x6A, 0x47, 0x42, 0x6B, 0x59, 0x41, 0x2B, 0x70, 0x34, 0x72, 0x64,
            0x63, 0x36, 0x73, 0x48, 0x61, 0x65, 0x43, 0x7A, 0x38, 0x41, 0x33, 0x48, 0x68, 0x34, 0x79, 0x66, 0x63, 0x72,
            0x58, 0x70, 0x6B, 0x54, 0x78, 0x52, 0x6A, 0x45, 0x5A, 0x74, 0x56, 0x54, 0x55, 0x4E, 0x46, 0x75, 0x34, 0x73,
            0x56, 0x4E, 0x56, 0x4C, 0x52, 0x57, 0x79, 0x7A, 0x50, 0x75, 0x67, 0x61, 0x34, 0x65, 0x76, 0x51, 0x5A, 0x69,
            0x67, 0x35, 0x75, 0x62, 0x4B, 0x36, 0x2B, 0x42, 0x75, 0x51, 0x4E, 0x5A, 0x4E, 0x76, 0x6E, 0x4A, 0x2B, 0x39,
            0x50, 0x49, 0x66, 0x37, 0x57, 0x4E, 0x6B, 0x39, 0x33, 0x55, 0x2B, 0x53, 0x6C, 0x55, 0x67, 0x4A, 0x70, 0x4A,
            0x31, 0x72, 0x4F, 0x6D, 0x32, 0x76, 0x30, 0x56, 0x6C, 0x54, 0x68, 0x51, 0x4E, 0x6C, 0x73, 0x36, 0x45, 0x2B,
            0x4D, 0x47, 0x41, 0x39, 0x74, 0x58, 0x2F, 0x73, 0x6C, 0x52, 0x36, 0x72, 0x72, 0x4F, 0x39, 0x35, 0x45, 0x47,
            0x6B, 0x72, 0x6C, 0x52, 0x70, 0x44, 0x6D, 0x72, 0x34, 0x76, 0x37, 0x54, 0x6D, 0x78, 0x6D, 0x48, 0x76, 0x68,
            0x63, 0x61, 0x50, 0x6C, 0x67, 0x47, 0x35, 0x6F, 0x64, 0x63, 0x71, 0x4A, 0x76, 0x4A, 0x30, 0x47, 0x4F, 0x72,
            0x5A, 0x58, 0x33, 0x32, 0x63, 0x56, 0x58, 0x7A, 0x4D, 0x77, 0x47, 0x38, 0x6F, 0x58, 0x71, 0x44, 0x69, 0x6D,
            0x49, 0x51, 0x45, 0x56, 0x39, 0x71, 0x39, 0x41, 0x61, 0x30, 0x61, 0x41, 0x37, 0x74, 0x55, 0x4E, 0x2B, 0x50,
            0x67, 0x4A, 0x79, 0x51, 0x55, 0x30, 0x62, 0x2F, 0x51, 0x46, 0x6B, 0x65, 0x54, 0x6D, 0x78, 0x66, 0x65, 0x42,
            0x51, 0x53, 0x6D, 0x48, 0x67, 0x31, 0x47, 0x66, 0x4D, 0x7A, 0x52, 0x75, 0x77, 0x42, 0x4F, 0x4E, 0x75, 0x52,
            0x70, 0x4E, 0x5A, 0x70, 0x64, 0x44, 0x6F, 0x65, 0x50, 0x55, 0x62, 0x66, 0x74, 0x78, 0x63, 0x54, 0x30, 0x76,
            0x66, 0x4C, 0x46, 0x47, 0x6F, 0x32, 0x68, 0x65, 0x59, 0x6D, 0x77, 0x6C, 0x48, 0x6A, 0x30, 0x51, 0x30, 0x30,
            0x59, 0x4E, 0x39, 0x79, 0x51, 0x35, 0x58, 0x39, 0x67, 0x4B, 0x6A, 0x6F, 0x47, 0x6C, 0x45, 0x79, 0x53, 0x76,
            0x65, 0x54, 0x2B, 0x4A, 0x75, 0x52, 0x77, 0x78, 0x68, 0x6E, 0x4F, 0x6A, 0x7A, 0x6C, 0x34, 0x36, 0x30, 0x6B,
            0x43, 0x44, 0x6B, 0x67, 0x38, 0x55, 0x65, 0x2F, 0x48, 0x2F, 0x66, 0x61, 0x51, 0x61, 0x65, 0x6A, 0x6F, 0x46,
            0x64, 0x32, 0x46, 0x50, 0x6F, 0x66, 0x36, 0x69, 0x2F, 0x74, 0x2B, 0x54, 0x56, 0x55, 0x73, 0x34, 0x68, 0x5A,
            0x59, 0x30, 0x4D, 0x30, 0x52, 0x65, 0x78, 0x6B, 0x47, 0x59, 0x2F, 0x58, 0x61, 0x75, 0x43, 0x55, 0x36, 0x57,
            0x39, 0x62, 0x78, 0x32, 0x77, 0x46, 0x5A, 0x66, 0x6B, 0x46, 0x78, 0x68, 0x5A, 0x67, 0x68, 0x59, 0x64, 0x78,
            0x53, 0x57, 0x54, 0x76, 0x6D, 0x58, 0x55, 0x57, 0x67, 0x78, 0x64, 0x66, 0x38, 0x36, 0x7A, 0x6C, 0x2B, 0x76,
            0x79, 0x42, 0x79, 0x44, 0x61, 0x38, 0x46, 0x31, 0x6E, 0x68, 0x43, 0x57, 0x34, 0x4B, 0x4B, 0x7A, 0x53, 0x70,
            0x65, 0x70, 0x48, 0x47, 0x4F, 0x36, 0x36, 0x6B, 0x53, 0x71, 0x54, 0x68, 0x70, 0x78, 0x55, 0x6D, 0x4D, 0x54,
            0x35, 0x51, 0x3D, 0x3D, 0x3C, 0x2F, 0x4D, 0x6F, 0x64, 0x75, 0x6C, 0x75, 0x73, 0x3E, 0x3C, 0x45, 0x78, 0x70,
            0x6F, 0x6E, 0x65, 0x6E, 0x74, 0x3E, 0x41, 0x51, 0x41, 0x42, 0x3C, 0x2F, 0x45, 0x78, 0x70, 0x6F, 0x6E, 0x65,
            0x6E, 0x74, 0x3E, 0x3C, 0x2F, 0x52, 0x53, 0x41, 0x4B, 0x65, 0x79, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x3E
        };

        public License Decrypt(EncryptDetails details)
        {
            var publicKey = Encoding.UTF8.GetString(_pkBytes);
            Rsa.GetHash(details.AesContent, out string hashData);
            var flag = Rsa.SignatureDeformatter(publicKey, hashData, details.RsaContent);
            if (!flag) return null;
            var license = JsonConvert.DeserializeObject<License>(AesHelper.Decrypt(details.AesContent, details.AesKey));
            return license;
        }

        public bool Correct(string code, string productName = "")
        {
            var serial = deviceInfo.SerialNumber(productName);
            if (string.IsNullOrEmpty(code))
            {
                logger?.LogInformation("未查询到授权码!");
                return false;
            }
            var license = Decrypt(new EncryptDetails(code));
            if (license == null)
            {
                logger?.LogInformation("解析失败!");
                return false;
            }

            if (DateTime.Now >= license.EndDate || DateTime.Now < license.BeginDate)
            {
                logger?.LogInformation("超期!");
                return false;
            }

            if (!license.ProductName.Equals(productName))
            {
                logger?.LogInformation($"未验证的序列号!");
                return false;
            }

            if (!license.MachineCode.Equals(serial))
            {
                logger?.LogInformation($"非本机激活码[{license.MachineCode}]!");
                return false;
            }

            if (license.IsBlock)
            {
                logger?.LogInformation("异常,请联系制造商!");
                return false;
            }

            if (license.Count != -1)
            {
                logger?.LogInformation("异常!");
                return false;
            }
            logger?.LogInformation("通过!");
            return true;
        }

        public bool CheckProduct(string product)
        {
            //reg add HKLM\SOFTWARE\WOW6432Node\JKSoft /v product /t REG_SZ /d "激活码"
            var SOFTWARE = Registry.LocalMachine.OpenSubKey("SOFTWARE");
            var hasSubKey = SOFTWARE.GetSubKeyNames()!.Contains("JKSoft");
            if (!hasSubKey) return false;

            var regKey = SOFTWARE.OpenSubKey("JKSoft");
            if (regKey == null) return false;

            var hasValue = regKey.GetValueNames().Contains(product);
            if (!hasValue) return false;

            var value = regKey.GetValue(product, "-1").ToString();
            if (value.Equals("-1")) return false;

            return Correct(value, product);
        }

        public void GenerateMachineCode(string productName)
        {
            var content = $"您的机器码:[{GetSerialNumber(productName)}]{Environment.NewLine}请发送机器码给我们!";
            File.WriteAllText("register.txt", content);
            Process.Start("register.txt");
        }

        public string GetSerialNumber(string productName) => deviceInfo.SerialNumber(productName);
    }

    public class EncryptDetails
    {
        public string AesKey { get; set; }
        public int AesLength { get; set; }
        public string AesContent { get; set; }
        public string RsaContent { get; set; }

        public EncryptDetails(string str)
        {
            AesKey = str.Substring(0, 16);
            AesLength = Convert.ToInt32(str.Substring(16, 4), 16);
            AesContent = str.Substring(20, AesLength);
            RsaContent = str.Substring(20 + AesLength);
        }

        public EncryptDetails()
        {
        }

        public override string ToString()
            => AesKey + AesLength.ToString("X") + AesContent + RsaContent;
    }

    public class License
    {
        public string Id { get; set; }
        public string ProductName { get; set; }
        public string Email { get; set; }
        public string Name { get; set; }
        public string MachineCode { get; set; }
        public bool IsBlock { get; set; }
        public DateTime BeginDate { get; set; }
        public DateTime EndDate { get; set; }
        public int Count { get; set; }
        public string DisableFunctionList { get; set; }
        public string DisableVersionList { get; set; }
    }
}